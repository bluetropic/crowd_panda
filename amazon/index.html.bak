<!DOCTYPE html>
<html>
<head>
    <meta charset=UTF-8>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>CrowdSorcery</title>
    <link rel="stylesheet" type="text/css" media="screen" href="bootstrap-3.3.4-dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" type="text/css" media="screen" href="crowd-main.css"/>
    <link rel="stylesheet" href="./jquery.imgareaselect/css/imgareaselect-default.css"/>
    <style>
        .hotspot {
            position: absolute;
            background-color: #87cefa;
            opacity: 0.5;
            cursor: pointer;
        }

        .hotspot.editing {
            display: none;
        }

        .task-material-widget .set-link {
            position: absolute;
            display: none;
            z-index: 999;
        }
    </style>
</head>
<body>
<div id="container" class="container">
    <div style="position: relative;">
        <div class="well">
            <h3>Hints</h3>
            <ul id="task-hint">
                <li>Click the left top of the Figure and draw to its right bottom.</li>
                <li>Adjusting until the current Figure is exactly embraced by the rectangle.</li>
            </ul>
        </div>
        <div id="buttons" style="margin-bottom: 10px;">
            <button class="btn btn-success btn-lg" type="submit">Submit</button>
            <p id="submit-hint" style="display: none;color: #FF0000;">You must ACCEPT the HIT before you can submit the results.</p>
        </div>
        <div id="task-show-widget">
            <form id="task-material-widget" class="task-material-widget clearfix" action="https://workersandbox.mturk.com/mturk/externalSubmit" method="POST" style="position:relative;">
                <input type="hidden" id="assignmentId" name="assignmentId" value=""/>
                <input type="hidden" name="result"/>
                <div class="material">
                    <div class="set-link">
                        <div class="input-group">
                            <input class="link-input form-control" type="text" placeholder="please input area info"/>
                                <span class="input-group-btn">
                                    <button class="set-link-action btn btn-info">Save</button>
                                </span>
                        </div>
                    </div>
                    <img id="image" style="max-width: 100%"/>
                </div>
            </form>
        </div>
    </div>
</div>
<script src="jquery-2.1.3.min.js"></script>
<script src="./jquery.imgareaselect/jquery.imgareaselect.min.js"></script>
<script src="js.cookie-2.0.4.min.js"></script>
<script src="veil.js"></script>
<script>
    $(document).ready(function () {
        var ias = null;
        var assignmentId = gup('assignmentId');
        $('#assignmentId').val(assignmentId);
        if (assignmentId == "ASSIGNMENT_ID_NOT_AVAILABLE") {
            $('#submit-hint').show();
            $('#buttons [type=submit]').prop('disabled', true);
        } else {
            $('#submit-hint').hide();
            $('#buttons [type=submit]').prop('disabled', false);
        }
        $('#image').attr('src', './images/' + gup('imageFileName'));

        veil.widget.initializers.push(initImgAreaSelect);

        veil.widget.handle('#buttons', '[type=submit]', 'click', function (widget, e) {
            e.preventDefault();
            var data = {
                image_width: $('#image').width(),
                image_height: $('#image').height(),
                hotspots: []
            };
            var hotspots = [];
            $('.task-material-widget').find('.hotspot:not(.editing)').each(function () {
                hotspots.push(getHotspotAttributes($(this)));
            });
            data.hotspots = hotspots;
            if (data.hotspots.length === 0) {
                if (!confirm('Do you want to submit even there are some non-processed materials?')) {
                    return;
                }
            }
            var $form = $('#task-material-widget');
            $form.find('[name=result]').val(JSON.stringify(data));
            $form.submit();
        });

        veil.widget.handle('.task-material-widget', '.set-link-action', 'click', function (widget, e) {
            e.preventDefault();
            var $hotspot = widget.find('.hotspot.editing');
            $hotspot.removeClass('editing');
            var $linkInput = widget.find('.link-input');
            $hotspot.data('link', $linkInput.val());
            $hotspot.find('.link-to').text('Value is: ' + $linkInput.val());
            $linkInput.val('');
            widget.find('.set-link').fadeOut();
            ias.cancelSelection();
        });
        veil.widget.handle('.task-material-widget', '.hotspot', 'click', function (widget, e) {
            var attributes = getHotspotAttributes($(this));
            ias.setSelection(attributes.left, attributes.top, attributes.left + attributes.width, attributes.top + attributes.height, true);
            widget.find('.link-input').val(attributes.link);
            widget.find('.set-link').css({
                left: attributes.left,
                top: attributes.top - 40
            }).fadeIn();
            ias.setOptions({show: true});
            ias.update();
            $(this).addClass('editing');
        });

        initImgAreaSelect();

        function initImgAreaSelect() {
            var $widget = $('.task-material-widget');
            ias = $('.task-material-widget img').imgAreaSelect({
                instance: true,
                handles: true,
                minWidth: 50,
                minHeight: 50,
                onSelectStart: function () {
                    if (0 == $widget.find('.hotspot.editing').length) {
                        $widget.append('<div class="hotspot editing"><span class="link-to"></span></div>');
                    }
                },
                onSelectChange: function (img, selection) {
                    if (0 == selection.width) {
                        return;
                    }
                    if (0 == selection.height) {
                        return;
                    }
                    var $hotspot = $widget.find('.hotspot.editing');
                    $widget.find('.set-link').fadeOut();
                    $hotspot.css({
                        left: selection.x1 + 'px',
                        top: selection.y1 + 'px',
                        width: selection.width + 'px',
                        height: selection.height + 'px'
                    });
                },
                onSelectEnd: function (img, selection) {
                    if (selection.width === 0 || selection.height === 0) {
                        $widget.find('.set-link').fadeOut();
                        return;
                    }
                    $widget.find('.set-link').css({
                        left: selection.x1 + 'px',
                        top: selection.y1 - 35 + 'px'
                    }).fadeIn();
                }
            });
        }

        function getHotspotAttributes($hotspot) {
            return {
                left: parseInt($hotspot.css('left').replace('px', '')),
                top: parseInt($hotspot.css('top').replace('px', '')),
                width: parseInt($hotspot.css('width').replace('px', '')),
                height: parseInt($hotspot.css('height').replace('px', '')),
                link: $hotspot.data('link')
            }
        }

        function gup(name) {
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var tmpURL = window.location.href;
            var results = regex.exec(tmpURL);
            if (results == null)
                return "";
            else
                return results[1];
        }

        function decode(strToDecode) {
            var encoded = strToDecode;
            return unescape(encoded.replace(/\+/g, " "));
        }
    });
</script>
</body>
</html>
